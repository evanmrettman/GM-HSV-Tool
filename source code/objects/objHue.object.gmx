<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables
if instance_number(object_index) &gt; 1 {
    instance_destroy();
} else {
    sprite = sprCherry
    save_sprite = false;
    hue_press = false;
    sat_press = false;
    val_press = false;
    width = 98; height = 18;
    x_pos = x+16
    hue_y = y+24;
    sat_y = y+64;
    val_y = y+104;
    y_diff = 40;
    dir_temp = noone;
    simple_mode = false;
    for(var i = 0; i &lt; 6; i++) {
        button_index[i] = 0;
    }
    scrBlendRandom();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// color control
var left = mouse_check_button_pressed(mb_left);
var right = mouse_check_button_pressed(mb_right);
var left_release = mouse_check_button_released(mb_left);
var ctrl = keyboard_check(vk_control);

if left || right {
    var ctrl = keyboard_check_pressed(vk_control);
    
    if (mouse_x &gt;= x_pos &amp;&amp; mouse_x &lt;= x_pos + width) {
    
        if (mouse_y &gt;= hue_y &amp;&amp; mouse_y &lt;= hue_y + height) {
            if left { 
                hue_press = true 
            } else if right { 
                if mouse_x &gt; hue_pos { 
                    hue += 1 
                } else if mouse_x &lt; hue_pos {
                    hue -= 1
                }
                scrPosUpdate();
            }
        } else if (mouse_y &gt;= sat_y &amp;&amp; mouse_y &lt;= sat_y + height) {
            if left { 
                sat_press = true 
            } else if right { 
                if mouse_x &gt; sat_pos { 
                    sat += 1 
                } else if mouse_x &lt; sat_pos {
                    sat -= 1
                }
                scrPosUpdate();
            }
        } else if (mouse_y &gt;= val_y &amp;&amp; mouse_y &lt;= val_y + height) {
            
            if left { 
                val_press = true 
            } else if right { 
                if mouse_x &gt; val_pos { 
                    val += 1 
                } else if mouse_x &lt; val_pos {
                    val -= 1
                }
                scrPosUpdate();
            }
        }
        
    }
    
}

    var pos_speed = 3;
    if ctrl { pos_speed /= 3 }
    
    if hue_press || sat_press || val_press {
    
    if hue_press {
        if left_release {
            hue_press = false
        } else {
            if mouse_x &gt; hue_pos { 
                hue_pos += pos_speed;
                if mouse_x &lt; hue_pos { hue_pos = mouse_x }
            } else if mouse_x &lt; hue_pos {
                hue_pos -= pos_speed;
                if mouse_x &gt; hue_pos { hue_pos = mouse_x }
            }
        }
    }
    if sat_press {
        if left_release {
            sat_press = false
        } else {
            if mouse_x &gt; sat_pos { 
                sat_pos += pos_speed;
                if mouse_x &lt; sat_pos { sat_pos = mouse_x }
            } else if mouse_x &lt; sat_pos {
                sat_pos -= pos_speed;
                if mouse_x &gt; sat_pos { sat_pos = mouse_x }
            }
        }
    }
    if val_press {
        if left_release {
            val_press = false
        } else {
            if mouse_x &gt; val_pos { 
                val_pos += pos_speed;
                if mouse_x &lt; val_pos { val_pos = mouse_x }
            } else if mouse_x &lt; val_pos {
                val_pos -= pos_speed;
                if mouse_x &gt; val_pos { val_pos = mouse_x }
            }
        }
    }
    scrHueUpdate()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// buttons
var bHeight = 36; var bDistance = 11; var bAmount = 6;

    /*
    draw_rectangle(x+16,312+bHeight*i,x+13+width,312+bHeight*i+height+5,false);
    x+16
    x+13+width
    312+bHeight*i
    312+bHeight*i+height+5
    */
// check if released
for(var i = 0; i &lt; bAmount; i++) {
    if mouse_y &gt;= 312+bHeight*i &amp;&amp; mouse_y &lt;= 312+bHeight*i+height+5 {
        if mouse_x &gt;= x+16 &amp;&amp; mouse_x &lt;= x+13+width {
            if mouse_check_button_pressed(mb_left) {
                button_index[i] = true;
            }
        }
    }
}
// check if released
for(var i = 0; i &lt; bAmount; i++) {
    if mouse_y &gt;= 312+bHeight*i &amp;&amp; mouse_y &lt;= 312+bHeight*i+height+5 {
        if mouse_x &gt;= x+16 &amp;&amp; mouse_x &lt;= x+13+width {
            if mouse_check_button_released(mb_left) {
                if button_index[i] {
                    event_user(i);
                }
            }
        }
    }
}
// clear buffer
if !mouse_check_button(mb_left) {
    for (var i = 0; i &lt; bAmount; i++) {
        button_index[i] = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// other keybinds
if keyboard_check_pressed(vk_f1) { // get new sprite
    event_user(0);
}
if keyboard_check_pressed(ord("S")) { // save sprite
    event_user(1);
}
if keyboard_check_pressed(ord("R")) { // randomize color
    event_user(2);
}
if keyboard_check_pressed(vk_f2) { // restart
    event_user(3);
}
if keyboard_check_pressed(192) { // simple mode 192 = ord("~")
    event_user(4);
}
if keyboard_check_pressed(vk_escape) { // lose game
    event_user(5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// close game
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// simple mode
simple_mode = !simple_mode;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// restart
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// random hue
scrBlendRandom();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// save sprite
scrSpriteSave();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// get new sprite
scrSpriteUpdate();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite != sprCherry { sprite_delete(sprite); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawing stuff


var sWidth = sprite_get_width(sprite);
var sHeight = sprite_get_height(sprite);
var xscale = 1;
var yscale = 1;
var scale_lim = 98;
if sWidth &gt; scale_lim { xscale = 1/(sWidth/scale_lim); }
if sHeight &gt; scale_lim { yscale = 1/(sHeight/scale_lim); }
// simple mode
if simple_mode {
    draw_set_alpha(1)
    draw_set_color(c_white);
    draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,false);
    draw_sprite_ext(sprite,0,336-sWidth/2,304-sHeight/2,1,1,0,blend,1); // sprite display
    draw_set_alpha(1);
    with(oPlayer) { image_alpha = 0; }
} else { with(oPlayer) { image_alpha = 1; } }

// draw self
draw_set_alpha(1);
draw_self();
// font
draw_set_color(c_black)
draw_set_font(fDebug);
draw_set_halign(fa_left);
var yy = y+4;
var yy_inc = y_diff;
draw_text(x_pos,yy,"Hue: " + string(round(hue))); yy += yy_inc;
draw_text(x_pos,yy,"Saturation: " + string(round(sat))); yy += yy_inc;
draw_text(x_pos,yy,"Luminosity: " + string(round(val))); yy += yy_inc;
draw_text(x_pos,yy,"Color Display"); yy += yy_inc;
draw_text(x_pos,yy,"Image Preview"); yy += 128
draw_set_halign(fa_center);
draw_text(x+128/2,y+608-24*1.5,"#GM HSV Tool"/*#Created by Sudnep*/);
/// visual elements
draw_set_color(blend);
draw_sprite_ext(sprite,0,x+64-sWidth/2*xscale,y+233-sHeight/2*yscale,xscale,yscale,0,blend,1); // sprite display
draw_rectangle(x+15,y+144,x+15+width-1,y+144+height-1,false); // color display
draw_sprite_ext(sprPos,0,hue_pos-1,hue_y,1,1,0,blend,image_alpha); // hue arrow
draw_sprite_ext(sprPos,0,sat_pos-1,sat_y,1,1,0,blend,image_alpha); // sat arrow
draw_sprite_ext(sprPos,0,val_pos-1,val_y,1,1,0,blend,image_alpha); // val arrow
// buttons
draw_set_halign(fa_center);
draw_set_color(c_black);
draw_set_alpha(1);

var button_width = 96;
yy = 312; yy_inc = 36;

draw_sprite(sprButton,button_index[0],x_pos,yy)
draw_text(x_pos+button_width/2,yy+4,"New Sprite") yy += yy_inc;
draw_sprite(sprButton,button_index[1],x_pos,yy)
draw_text(x_pos+button_width/2,yy+4,"Save Sprite") yy += yy_inc;
draw_sprite(sprButton,button_index[2],x_pos,yy)
draw_text(x_pos+button_width/2,yy+4,"Randomize") yy += yy_inc;
draw_sprite(sprButton,button_index[3],x_pos,yy)
draw_text(x_pos+button_width/2,yy+4,"Restart") yy += yy_inc;
draw_sprite(sprButton,button_index[4],x_pos,yy)
draw_text(x_pos+button_width/2,yy+4,"Simple Mode") yy += yy_inc;
draw_sprite(sprButton,button_index[5],x_pos,yy)
draw_text(x_pos+button_width/2,yy+4,"Close") yy += yy_inc;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
