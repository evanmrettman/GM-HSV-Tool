<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorKid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump = 8.5 * global.grav
jump2 = 7 * global.grav
maxSpeed = 3
maxVSpeed = 9
gravity = 0.4 * global.grav
xscale = 1

frozen = false
djump = true
onPlatform = false
image_speed = 0.2
sprite_index = sPlayerIdle

if global.grav == 1 {
    mask_index = sPlayerMask
}
else {
    mask_index = sPlayerMaskFlip
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// edge of screen death
if x &lt; 0 or x &gt; room_width or y &lt; 0 or y &gt; room_height {
    killPlayer()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// standard player movement (with YoYoYoDude1's fixed vines)

var notOnBlock = place_free(x,y+global.grav)
var onVineL = place_meeting(x-1,y,oWalljumpL) and notOnBlock
var onVineR = place_meeting(x+1,y,oWalljumpR) and notOnBlock
var slipBlockTouching = instance_place(x,y+4*global.grav,oSlipBlock)

var h = 0
if not frozen {
    if keyboard_check_direct(global.key_right) {
        h = 1
    }
    else if keyboard_check_direct(global.key_left) {
        h = -1
    }
}

// moving
if h != 0 {
    if not onVineL and not onVineR {
        xscale = h
    }
    if (h == -1 and not onVineR) or (h == 1 and not onVineL) {
        if slipBlockTouching == noone {
            hspeed = maxSpeed * h
        }
        else {
            if (h == 1 and hspeed &lt; maxSpeed) or (h == -1 and hspeed &gt; -maxSpeed) {
                hspeed += slipBlockTouching.slip * h
            }
        }
        sprite_index = sPlayerRunning
        image_speed = 0.5
    }
}
// not moving
else {
    if slipBlockTouching == noone {
        hspeed = 0
    }
    else {
        if hspeed &gt; 0 {
            hspeed -= slipBlockTouching.slip
            if hspeed &lt;= 0 hspeed = 0
        }
        else if hspeed &lt; 0 {
            hspeed += slipBlockTouching.slip
            if hspeed &gt;= 0 hspeed = 0
        }
    }
    sprite_index = sPlayerIdle
    image_speed = 0.2
}

// set jump/fall sprite
if not onPlatform {
    if vspeed*global.grav &lt; -0.05 {
        sprite_index = sPlayerJump
    }
    else if vspeed*global.grav &gt; 0.05 {
        sprite_index = sPlayerFall
    }
}

// fall off platform
if onPlatform and not place_meeting(x,y+4*global.grav,oPlatform) {
    onPlatform = false
}

// slide block
var slideBlockTouching = instance_place(x,y+global.grav,oSlideBlock)
if slideBlockTouching != noone {
    hspeed += slideBlockTouching.h
}

// terminal velocity
if abs(vspeed) &gt; maxVSpeed {
    vspeed = sign(vspeed)*maxVSpeed
}

// jump, shoot, suicide
if not frozen {
    if keyboard_check_pressed(global.key_shoot) playerShoot()
    if keyboard_check_pressed(global.key_jump) playerJump()
    if keyboard_check_released(global.key_jump) playerVJump()
}

// walljumps
if onVineL or onVineR {
    if onVineR xscale = -1
    else xscale = 1
    vspeed = 2*global.grav
    sprite_index = sPlayerSliding
    image_speed = 0.5
    
    // pressed away from the vine
    if (onVineL and keyboard_check_pressed(global.key_right))
    or (onVineR and keyboard_check_pressed(global.key_left)) {
        
        // jumping off vine
        if keyboard_check(global.key_jump) {
            if onVineR hspeed = -15
            else hspeed = 15
            vspeed = -9 * global.grav
            audio_play_sound(sndWallJump,0,false)
            sprite_index = sPlayerJump
        }
        
        // falling off vine
        else {
            if onVineR hspeed = -3
            else hspeed = 3
            sprite_index = sPlayerFall
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>killPlayer()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.grav == 1 {
    // touching platform
    if y-vspeed/2 &lt;= other.y {
        
        // snap to platform
        if other.vspeed &gt;= 0 {
            y = other.y-9
            vspeed = other.vspeed
        }
        onPlatform = true
        djump = true
    }
}
else {
    // touching platform
    if y-vspeed/2 &gt;= other.y+other.sprite_height-1 {
    
        // snap to platform
        if other.yspeed &lt;= 0 {
            y = other.y+other.sprite_height+8
            vspeed = other.yspeed
        }
        onPlatform = true
        djump = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// push against blocks horizontally
if not place_free(x+hspeed,y) {
    if global.grav == 1 {
        var dir
        if hspeed &lt;= 0 dir = 180
        if hspeed &gt; 0 dir = 0
        move_contact_solid(dir, abs(hspeed))
    }
    else {
        var dir
        if hspeed &lt; 0 dir = 180
        if hspeed &gt;= 0 dir = 0
        move_contact_solid(dir, abs(hspeed))
    }
    hspeed = 0
}

// push against blocks vertically
if not place_free(x,y+vspeed) {
    if global.grav == 1 {
        var dir
        if vspeed &lt;= 0 dir = 90
        if vspeed &gt; 0 {
            dir = 270
            djump = true
        }
        move_contact_solid(dir, abs(vspeed))
    }
    else {
        var dir
        if vspeed &lt;= 0 {
            dir = 90
            djump = true
        }
        if vspeed &gt; 0 dir = 270
        move_contact_solid(dir, abs(vspeed))
    }
    vspeed = 0
}

if not place_free(x+hspeed,y+vspeed) {
    hspeed = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//need to draw the player a pixel off in the y-axis when flipped for some reason
var drawY = y
if global.grav == -1 drawY += 1

draw_sprite_ext(sprite_index,image_index,x,drawY,xscale,global.grav,
image_angle,image_blend,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
